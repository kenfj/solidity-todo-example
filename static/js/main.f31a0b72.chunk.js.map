{"version":3,"sources":["components/NotiSnackbar.tsx","components/TaskInput.tsx","components/TaskTable.tsx","components/ToDoAppBar.tsx","hooks/useDarkMode.ts","hooks/useNetwork.ts","hooks/useToDoApi.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NotiSnackbar","appMsg","useSnackbar","enqueueSnackbar","closeSnackbar","useEffect","variant","message","autoHideDuration","action","key","Button","onClick","useStyles","makeStyles","theme","textfields","justifyContent","textfield","width","marginRight","TaskInput","createTask","classes","contentElm","useRef","document","createElement","Grid","container","spacing","item","xs","className","TextField","type","inputRef","color","current","value","formatDate","rawDate","_date","Date","Number","d","getMonth","getDate","t","getHours","getMinutes","TaskList","tasks","toggleDone","deleteTask","length","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","task","Checkbox","checked","onChange","inputProps","IconButton","size","root","flexGrow","title","connectStatus","marginLeft","ToDoAppBar","wallet","network","account","connectNetwork","setAppMsg","useState","enableConnBtn","setEnableConnBtn","AppBar","position","Toolbar","Typography","label","style","fontSize","margin","InputProps","readOnly","disabled","then","catch","err","matchDark","useDarkMode","window","matchMedia","matches","isDark","setIsDark","toggleDark","useCallback","prevIsDark","undefined","matcher","m","addEventListener","removeEventListener","useNetwork","setWallet","setNetwork","setAccount","theWeb3","setWeb3","ethereum","isMetaMask","a","web3_","Web3","givenProvider","console","log","version","setupNetwork","setupAccount","eth","getNodeInfo","nodeInfo","split","getChainId","chainId","net","getId","networkId","getNetworkType","networkType","requestAccounts","accounts","getAccounts","gasLimit","useTodoApi","todo","setTodo","taskIds","setTaskIds","setTasks","logError","msg","ToDoJson","networks","abi","address","todo_","Contract","initToDo","refreshTaskIds","methods","getTaskIds","call","ids","Error","useLayoutEffect","Promise","all","filter","e","taskId","getTask","refreshTasks","content","send","from","gas","paper","maxWidth","padding","textAlign","alert","App","createMuiTheme","palette","primary","main","colors","blue","ThemeProvider","CssBaseline","Alert","severity","elevation","Switch","edge","TaskTable","maxSnack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f31a0b72.chunk.js","sourcesContent":["import { Button } from '@material-ui/core'\nimport { SnackbarKey, useSnackbar } from 'notistack'\nimport React, { useEffect } from 'react'\nimport { AppMsg } from '../Types'\n\n// Notistack Demo: https://iamhosseindhv.com/notistack/demos\n\ntype Props = {\n  appMsg: AppMsg,\n}\n\nfunction NotiSnackbar({ appMsg }: Props) {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar()\n\n  useEffect(() => {\n    const [variant, message] = appMsg\n\n    if (message === \"\") return\n\n    const action = (key: SnackbarKey) => (\n      <Button onClick={() => { closeSnackbar(key) }}>\n        'Dismiss'\n      </Button>\n    )\n\n    const options = {\n      variant: variant,\n      autoHideDuration: (variant === \"error\" ? 20 : 5) * 1000,\n      action,\n    }\n\n    enqueueSnackbar(message, options)\n  }, [closeSnackbar, enqueueSnackbar, appMsg])\n\n  return <></>\n}\n\nexport default NotiSnackbar\n","import { Button, Grid, makeStyles, TextField } from \"@material-ui/core\"\nimport React, { useRef } from \"react\"\n\ntype Props = {\n  createTask: (content: string) => Promise<void>,\n}\n\nconst useStyles = makeStyles((theme) => ({\n  textfields: {\n    justifyContent: \"center\",\n  },\n  textfield: {\n    width: 'calc(100% - 100px)',\n    marginRight: 10,\n  },\n}))\n\nfunction TaskInput({ createTask }: Props) {\n  const classes = useStyles()\n  const contentElm = useRef<HTMLInputElement>(document.createElement(\"input\"))\n\n  const addTask = () => {\n    createTask(contentElm.current.value)\n    contentElm.current.value = \"\"\n  }\n\n  return (\n    <Grid container spacing={10}>\n      <Grid item xs={12} className={classes.textfields}>\n        <TextField\n          type=\"text\"\n          inputRef={contentElm}\n          className={classes.textfield}\n        />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={addTask}>Add</Button>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default TaskInput\n","import { Checkbox, IconButton, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport React from \"react\";\nimport { Task } from \"../Types\";\n\ntype Props = {\n  tasks: Task[]\n  toggleDone: (taskId: number) => void\n  deleteTask: (taskId: number) => void\n}\n\nfunction TaskList({ tasks, toggleDone, deleteTask }: Props) {\n  return (\n    <>{\n      tasks.length === 0 ?\n        '登録されたTODOはありません。' :\n        <TableContainer component={Paper}>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>ID</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Content</TableCell>\n                <TableCell>Done</TableCell>\n                <TableCell>DateComplete</TableCell>\n                <TableCell>Delete</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {tasks.map((task) => (\n                <TableRow key={task[0]}>\n                  <TableCell>{task[0]}</TableCell>\n                  <TableCell>{formatDate(task[1])}</TableCell>\n                  <TableCell>{task[2]}</TableCell>\n                  <TableCell>\n                    <Checkbox\n                      checked={task[3]}\n                      color=\"primary\"\n                      onChange={() => toggleDone(Number(task[0]))}\n                      inputProps={{ 'aria-label': 'secondary checkbox' }}\n                    />\n                  </TableCell>\n                  <TableCell>{formatDate(task[4])}</TableCell>\n                  <TableCell>\n                    <IconButton\n                      aria-label=\"delete\"\n                      size=\"small\"\n                      onClick={() => deleteTask(Number(task[0]))}>\n                      <DeleteIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n    }</>\n  );\n}\n\nconst formatDate = (rawDate: string) => {\n  if (rawDate === \"0\") return \"--\"\n\n  const _date = new Date(Number(rawDate) * 1000)\n  const d = `${_date.getMonth() + 1}/${_date.getDate()}`\n  const t = `${_date.getHours()}:${_date.getMinutes()}`\n  return `${d} ${t}`\n};\n\nexport default TaskList\n","import { AppBar, Button, makeStyles, TextField, Toolbar, Typography } from '@material-ui/core';\nimport React, { Dispatch, SetStateAction, useState } from 'react';\nimport { AppMsg } from '../Types';\n\ntype Props = {\n  wallet: string,\n  account: string,\n  network: string,\n  connectNetwork: () => Promise<void>,\n  setAppMsg: Dispatch<SetStateAction<AppMsg>>,\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  connectStatus: {\n    color: \"white\",\n    width: \"64ch\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  },\n}))\n\nfunction ToDoAppBar({ wallet, network, account, connectNetwork, setAppMsg }: Props) {\n  const classes = useStyles();\n\n  const [enableConnBtn, setEnableConnBtn] = useState<boolean>(true)\n\n  const handleConnect = () => {\n    setEnableConnBtn(false)\n\n    connectNetwork().then(() => {\n      setAppMsg([\"info\", \"Connected\"])\n\n      setEnableConnBtn(true)\n    }).catch(err => {\n      setAppMsg([\"error\", `Error in Connect Network: ${err.message}`])\n\n      setEnableConnBtn(true)\n    })\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Solidity ToDo App\n          </Typography>\n\n          <TextField\n            label=\"Connection Info: Wallet/ChainID NetworkID (NetworkType)/Account\"\n            value={`${wallet} / ${network} / ${account}`}\n            inputProps={{ style: { fontSize: 12 } }}\n            size=\"small\"\n            margin=\"dense\"\n            variant=\"outlined\"\n            className={classes.connectStatus}\n            InputProps={{ readOnly: true, }} />\n\n          <Button\n            color=\"inherit\"\n            variant=\"outlined\"\n            disabled={!enableConnBtn}\n            onClick={handleConnect}>\n            Connect\n          </Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n\nexport default ToDoAppBar\n","// react custom hooks example\n// auto dark theme (controlled from System Preferences)\n//\n// Custom Hooks in React: The Ultimate UI Abstraction Layer\n// - Tanner Linsley | JSConf Hawaii 2020\n// https://www.youtube.com/watch?v=J-g9ZJha8FE\n\nimport { useCallback, useEffect, useState } from \"react\"\nimport { DarkMode } from \"../Types\"\n\nconst matchDark = '(prefers-color-scheme: dark)'\n\nfunction useDarkMode(): DarkMode {\n  const [isDark, setIsDark] = useState<boolean>(\n    () => window.matchMedia && window.matchMedia(matchDark).matches\n  )\n\n  // https://blog.uhy.ooo/entry/2021-02-23/usecallback-custom-hooks/\n  const toggleDark = useCallback(() => {\n    setIsDark(prevIsDark => !prevIsDark)\n  }, [])\n\n  useEffect(() => {\n    // skip if run from unit test\n    if (window.matchMedia === undefined) return\n\n    const matcher = window.matchMedia(matchDark)\n\n    const onChange = (m: MediaQueryListEvent) => setIsDark(m.matches)\n    matcher.addEventListener(\"change\", onChange)\n\n    return () => {\n      matcher.removeEventListener(\"change\", onChange)\n    }\n  }, [setIsDark])\n\n  return [isDark, toggleDark]\n}\n\nexport default useDarkMode\n","import { useEffect, useState } from 'react';\nimport Web3 from 'web3';\n\n// https://stackoverflow.com/questions/56457935\ndeclare global {\n  interface Window {\n    ethereum: any\n    web3: string\n  }\n}\n\n// NOTE: many changes in recent version\n\n// HTTP provider is deprecated; use Websocket provider instead\n// https://web3js.readthedocs.io/en/v1.3.4/web3.html#providers\n\n// Web3.js: givenProvider VS currentProvider\n// https://stackoverflow.com/questions/55822581\n\n// if ERC1193 compliant wallet (e.g. MetaMask) available on browser:\n//   web3 set window.ethereum to Web3.givenProvider\n//   and Web3.givenProvider == web3.currentProvider\n// else:\n//   givenProvider is null\n//   use external WebsocketProvider (local or remote Websocket URL)\n\n// MetaMask: web3.currentProvider is deprecated; use window.ethereum instead\n// https://docs.metamask.io/guide/provider-migration.html#replacing-window-web3\n\n// Don't use window.web3 MetaMask Legacy Web3\n// https://metamask.zendesk.com/hc/en-us/articles/360053147012\n\n// ethereum.networkVersion (DEPRECATED)\n// https://docs.metamask.io/guide/ethereum-provider.html#ethereum-networkversion-deprecated\n// use Chain ID over Network ID\n// https://chainid.network/\n\n// ethereum.selectedAddress (DEPRECATED)\n// https://docs.metamask.io/guide/ethereum-provider.html#ethereum-selectedaddress-deprecated\n// ethereum.enable() (DEPRECATED)\n// https://docs.metamask.io/guide/ethereum-provider.html#ethereum-enable-deprecated\n\nfunction useNetwork() {\n  const [wallet, setWallet] = useState<string>(\"---\")\n  const [network, setNetwork] = useState<string>(\"---\")\n  const [account, setAccount] = useState<string>(\"---\")\n  const [theWeb3, setWeb3] = useState<Web3>()\n\n  useEffect(() => {\n    // if ethereum-compatible browsers\n    if (typeof window.ethereum !== 'undefined') {\n      setWallet(window.ethereum?.isMetaMask ? \"MetaMask\" : \"OtherWallet\")\n    } else {\n      setWallet(\"None\")\n    }\n  }, [])\n\n  const connectNetwork = async () => {\n    // when injected provider like MetaMask available on browser\n    // Web3.givenProvider === window.ethereum\n    // web3.currentProvider === window.ethereum\n    // https://web3js.readthedocs.io/en/v1.3.4/getting-started.html\n    const fallbackWSProviderUrl = \"ws://127.0.0.1:9545\"\n    const web3_ = new Web3(Web3.givenProvider || fallbackWSProviderUrl)\n\n    console.log(`web3 version: ${web3_.version}`)\n    setWeb3(web3_)\n\n    setupNetwork(web3_)\n\n    // even if failed to setup account/network, initToDo will succeed\n    await setupAccount(web3_).catch(err => {\n      console.log(err.message)\n      throw err\n    })\n  }\n\n  const setupNetwork = async (web3_: Web3) => {\n    const nodeInfo = await web3_.eth.getNodeInfo()\n    console.log(`setupNetwork Connected by: ${nodeInfo}`)\n    setWallet(nodeInfo.split(\" \", 1)[0])\n\n    // Chain ID VS Network ID\n    // https://ethereum.stackexchange.com/questions/76581\n    // Chain ID and Network ID can be different\n    // https://medium.com/@pedrouid/chainid-vs-networkid-how-do-they-differ-on-ethereum-eec2ed41635b\n    // move away from networkId and start using chainId instead\n    // https://chainid.network/\n\n    // chain ID of the current connected node\n    const chainId = await web3_.eth.getChainId()\n\n    // current network ID\n    const networkId = await web3_.eth.net.getId()\n\n    const networkType = await web3_.eth.net.getNetworkType()\n      .catch(err => {\n        console.log(`Error in getNetworkType: ${err.message}`)\n        return \"unknown\"\n      })\n\n    setNetwork(`${chainId} ${networkId} (${networkType})`)\n  }\n\n  // https://stackoverflow.com/a/61199795\n  const setupAccount = (web3_: Web3) => {\n    // if ethereum-compatible browsers\n    if (typeof window.ethereum !== 'undefined') {\n      // window.ethereum.isConnected() is always true\n\n      // ethereum.enable() equivalent in the latest version\n      // https://web3js.readthedocs.io/en/v1.3.4/web3-eth.html#requestaccounts\n      return web3_.eth.requestAccounts().then(accounts => {\n        setAccount(accounts[0])\n      })\n      // the above request wallet_requestPermissions eth_requestAccounts in web3\n      // https://docs.metamask.io/guide/getting-started.html\n      // await window.ethereum.request({ method: 'eth_requestAccounts' });\n    } else {\n      return web3_.eth.getAccounts().then(accounts => {\n        setAccount(accounts[0])\n      })\n    }\n  }\n\n  return [{ wallet, network, account, theWeb3 }, connectNetwork] as const\n}\n\nexport default useNetwork\n","import { useCallback, useEffect, useLayoutEffect, useState } from \"react\";\nimport { AbiItem } from \"web3-utils\";\nimport { ToDo } from \"../../types/web3-v1-contracts/ToDo\";\nimport ToDoJson from '../contracts/ToDo.json';\nimport { Task, TodoApi, TodoApiProps } from \"../Types\";\n\nconst gasLimit = 1000000\n\nconst useTodoApi: TodoApi = ({ theWeb3, account, setAppMsg }: TodoApiProps) => {\n  const [todo, setTodo] = useState<ToDo>()\n  const [taskIds, setTaskIds] = useState<string[]>([])\n  const [tasks, setTasks] = useState<Task[]>([])\n\n  const logError = useCallback((msg: string) => {\n    console.log(msg)\n    setAppMsg([\"error\", msg])\n  }, [setAppMsg])\n\n  useEffect(() => {\n    const initToDo = async () => {\n      if (theWeb3 === undefined) return\n\n      const networkId = await theWeb3.eth.net.getId()\n      const network = (ToDoJson.networks as any)[networkId]\n\n      const abi = ToDoJson.abi as AbiItem[]\n      const address = network && network.address\n\n      console.log(ToDoJson.networks)\n\n      const todo_ = (new theWeb3.eth.Contract(abi, address) as any) as ToDo\n      setTodo(todo_)\n    }\n\n    initToDo().catch((err: Error) => {\n      logError(`Error initToDo: ${err.message}`)\n    })\n  }, [logError, theWeb3])\n\n  // Approach 3: using getTaskIds()\n  // https://eattheblocks.com/todo-list-ethereum-dapp-step8/\n  const refreshTaskIds = useCallback(async () => {\n    if (todo === undefined) return\n\n    try {\n      const ids = await todo.methods.getTaskIds().call()\n      // taskIds can be null when it is not connected\n      if (ids === null) {\n        throw new Error(\"Failed to get task ids. Check the account.\")\n      }\n      setTaskIds(ids)\n    } catch (err) {\n      logError(`Error refreshTaskIds: ${err.message}`)\n    }\n  }, [logError, todo])\n\n  // this is to run refreshTaskIds() after init()\n  useEffect(() => {\n    refreshTaskIds()\n  }, [refreshTaskIds])\n\n  useLayoutEffect(() => {\n    const refreshTasks = async () => {\n      if (todo === undefined) return\n\n      // await in map https://stackoverflow.com/questions/40140149\n      await Promise.all(\n        taskIds\n          .filter(e => e !== \"0\")\n          .map(taskId => todo.methods.getTask(taskId).call())\n      )\n        .then(setTasks)\n    }\n\n    refreshTasks()\n  }, [todo, taskIds])\n\n  const createTask = async (content: string) => {\n    if (todo === undefined) return\n\n    const tranObj = todo.methods.createTask(content)\n\n    tranObj.send({ from: account, gas: gasLimit })\n      .then(async () => {\n        setAppMsg([\"success\", `Created ${content}`])\n        refreshTaskIds()\n      }).catch((err) => {\n        logError(err.message)\n      })\n  }\n\n  const toggleDone = (taskId: number) => {\n    if (todo === undefined) return\n\n    const tranObj = todo.methods.toggleDone(taskId)\n\n    tranObj.send({ from: account, gas: gasLimit })\n      .then(async () => {\n        setAppMsg([\"success\", `Toggled ${taskId}`])\n        refreshTaskIds()\n      }).catch((err) => {\n        logError(err.message)\n      })\n  }\n\n  const deleteTask = (taskId: number) => {\n    if (todo === undefined) return\n\n    const tranObj = todo.methods.deleteTask(taskId)\n\n    tranObj.send({ from: account, gas: gasLimit })\n      .then(async () => {\n        setAppMsg([\"success\", `Deleted ${taskId}`])\n        refreshTaskIds()\n      }).catch((err) => {\n        logError(err.message)\n      })\n  }\n\n  return [tasks, { createTask, toggleDone, deleteTask }]\n}\n\nexport default useTodoApi\n","import { colors, CssBaseline, Grid, Paper, Switch } from '@material-ui/core';\nimport { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport { SnackbarProvider } from 'notistack';\nimport React, { useState } from 'react';\nimport NotiSnackbar from './components/NotiSnackbar';\nimport TaskInput from './components/TaskInput';\nimport TaskTable from './components/TaskTable';\nimport ToDoAppBar from './components/ToDoAppBar';\nimport useDarkMode from './hooks/useDarkMode';\nimport useNetwork from './hooks/useNetwork';\nimport useTodoApi from './hooks/useToDoApi';\nimport { AppMsg } from './Types';\nimport Alert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    flexGrow: 1,\n    maxWidth: 700,\n    margin: \"50px auto\",\n    padding: theme.spacing(10),\n    textAlign: 'center',\n  },\n  alert: {\n    marginLeft: \"auto\",\n    width: 'fit-content',\n  }\n}))\n\nfunction App() {\n  const classes = useStyles()\n  const [appMsg, setAppMsg] = useState<AppMsg>([\"info\", \"\"])\n\n  const [isDark, toggleDark] = useDarkMode()\n  const [{ wallet, network, account, theWeb3 }, connectNetwork] = useNetwork()\n  const [tasks, { createTask, toggleDone, deleteTask }] = useTodoApi({ theWeb3, account, setAppMsg })\n\n  // React + Material-UIでダークモードを実装してみた\n  // https://dev.classmethod.jp/articles/react-material-ui-dark-mode/\n  const theme = createMuiTheme({\n    palette: {\n      type: isDark ? \"dark\" : \"light\",\n      primary: {\n        main: colors.blue[600],\n      },\n    },\n  })\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <ToDoAppBar {...{ wallet, network, account }} connectNetwork={connectNetwork} setAppMsg={setAppMsg} />\n      <Alert severity=\"info\" className={classes.alert}>Try connect Ropsten</Alert>\n\n      <Paper elevation={5} className={classes.paper}>\n        <Grid container spacing={5}>\n          {/* https://kanchi0914.netlify.app/2020/03/12/react-spacer/ */}\n          <div style={{ flexGrow: 1 }}></div>\n          <Switch\n            color=\"default\"\n            size=\"small\"\n            edge=\"end\"\n            checked={isDark}\n            onChange={() => toggleDark()} />\n          <Grid item xs={12}>\n            <TaskInput createTask={createTask} />\n          </Grid>\n          <Grid item xs={12}>\n            <TaskTable\n              tasks={tasks}\n              toggleDone={toggleDone}\n              deleteTask={deleteTask} />\n          </Grid>\n        </Grid>\n      </Paper>\n      <SnackbarProvider maxSnack={3}>\n        <NotiSnackbar appMsg={appMsg} />\n      </SnackbarProvider>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}