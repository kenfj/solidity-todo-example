/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type TaskCreated = ContractEventLog<{
  id: string;
  date: string;
  content: string;
  done: boolean;
  0: string;
  1: string;
  2: string;
  3: boolean;
}>;
export type TaskDeleted = ContractEventLog<{
  id: string;
  0: string;
}>;
export type TaskStatusToggled = ContractEventLog<{
  id: string;
  done: boolean;
  dateComplete: string;
  0: string;
  1: boolean;
  2: string;
}>;

export interface ToDo extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ToDo;
  clone(): ToDo;
  methods: {
    createTask(_content: string): NonPayableTransactionObject<void>;

    getTask(id: number | string | BN): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: string;
    }>;

    getTaskFixtures(id: number | string | BN): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
      3: boolean;
    }>;

    getTaskIds(): NonPayableTransactionObject<string[]>;

    toggleDone(id: number | string | BN): NonPayableTransactionObject<void>;

    deleteTask(id: number | string | BN): NonPayableTransactionObject<void>;
  };
  events: {
    TaskCreated(cb?: Callback<TaskCreated>): EventEmitter;
    TaskCreated(
      options?: EventOptions,
      cb?: Callback<TaskCreated>
    ): EventEmitter;

    TaskDeleted(cb?: Callback<TaskDeleted>): EventEmitter;
    TaskDeleted(
      options?: EventOptions,
      cb?: Callback<TaskDeleted>
    ): EventEmitter;

    TaskStatusToggled(cb?: Callback<TaskStatusToggled>): EventEmitter;
    TaskStatusToggled(
      options?: EventOptions,
      cb?: Callback<TaskStatusToggled>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "TaskCreated", cb: Callback<TaskCreated>): void;
  once(
    event: "TaskCreated",
    options: EventOptions,
    cb: Callback<TaskCreated>
  ): void;

  once(event: "TaskDeleted", cb: Callback<TaskDeleted>): void;
  once(
    event: "TaskDeleted",
    options: EventOptions,
    cb: Callback<TaskDeleted>
  ): void;

  once(event: "TaskStatusToggled", cb: Callback<TaskStatusToggled>): void;
  once(
    event: "TaskStatusToggled",
    options: EventOptions,
    cb: Callback<TaskStatusToggled>
  ): void;
}
